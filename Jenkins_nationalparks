#!groovy
// Run this node on a Maven Slave
// Maven Slaves have JDK and Maven already installed

node('maven') {
  // Make sure your nexus_openshift_settings.xml
  // Is pointing to your nexus instance
  def nationalparksMvnCmd       = "mvn -s ./nexus_openshift_settings.xml"
  def nationalparks = "nationalparks"

  stage('Checkout Source Code') {
    // Get Source Code from SCM (Git) as configured in the Jenkins Project
    // Next line for inline script, "checkout scm" for Jenkinsfile from Gogs
    //git 'http://gogs-xyz-gogs.192.168.99.100.nip.io/CICDLabs/ParksMap.git'
    echo "Checkout Source code for national parks module" 
    checkout scm
  }



  // The following variables need to be defined at the top level and not inside
  // the scope of a stage - otherwise they would not be accessible from other stages.
  // Extract version and other properties from the pom.xml
  //def groupId    = getGroupIdFromPom("pom.xml")
  //def artifactId = getArtifactIdFromPom("pom.xml")
  def version    = getVersionFromPom("nationalparks/pom.xml")

  stage('Build nationalparks  jar') {
    echo "Building version ${version}" 
    sh "cd ${nationalparks}; ${nationalparksMvnCmd} clean package -DskipTests"
  }


  stage('Tests and Code Analysis') {
    
      parallel (
            'Unit Test': {
                echo "Unit Tests"
                sh "cd ${nationalparks}; ${nationalparksMvnCmd} test"    

            },
            'Code Analysis': {
                echo "Code Analysis"
                //PUT THE CORRECT SONARQUBE URL 
                sh "cd ${nationalparks}; ${nationalparksMvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-sonarqube.192.168.99.100.nip.io  -Dsonar.projectName=${JOB_BASE_NAME}"   

            }

      )
    
    }
     
}



 

// Convenience Functions to read variables from the pom.xml
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
 