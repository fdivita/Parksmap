#!groovy
// Run this node on a Maven Slave
// Maven Slaves have JDK and Maven already installed

node('maven') {
  // Make sure your nexus_openshift_settings.xml
  // Is pointing to your nexus instance
  def parksmapMvnCmd       = "mvn -s ./nexus_openshift_settings.xml"
  def parksmap = "parksmap-web"

  stage('Checkout Source Code') {
    // Get Source Code from SCM (Git) as configured in the Jenkins Project
    
    echo "Checkout Source code for parksmap-web module" 
    checkout scm
  }



  
  
  //Extract RELEASE from pom.xml
  def parksmapversion    = getVersionFromPom("parksmap-web/pom.xml")

  //Start build of parksmap jar   
  stage('Build parksmap-web jar') {
    echo "Building version ${parksmapversion}" 
    
    sh "cd ${parksmap}; ${parksmapMvnCmd} clean package -DskipTests"
  }

    //Run in parallel Unit Test and Code Analysis with SONARQUBE
  stage('Tests and Code Analysis') {
    
      parallel (
            'Unit Test': {
                echo "Unit Tests"
                sh "cd ${parksmap}; ${parksmapMvnCmd} test"    

            },
            'Code Analysis': {
                echo "Code Analysis"
                //PUT THE CORRECT SONARQUBE URL 
                sh "cd ${parksmap}; ${parksmapMvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-sonarqube.apps.35.229.52.249.nip.io  -Dsonar.projectName=${JOB_BASE_NAME}"   

            }

      )
    
    }
            
    
    //Publish jar artifact on sonarqube
    stage('Publish to Nexus') {
        echo "Publish to Nexus"

        sh "cd ${parksmap}; ${parksmapMvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-nexus.apps.35.229.52.249.nip.io/repository/releases"
    }

    //Build parksmap Openshift image 
    //Take the last build number and tag the image with RELEASE number and build number 
    stage('Build OpenShift Image in development ') {
        
        
        

        // Copy the jar file we just built and rename to jar.war
        sh "cd ${parksmap};cp ./target/parksmap-web.jar ./ROOT.jar"

        // Start Binary Build in OpenShift using the file we just published
        sh "oc project development"
        sh "cd ${parksmap};oc start-build parksmap-web --follow --from-file=./ROOT.jar -n development"

        
        sh "oc get bc/parksmap-web -n development --template='{{ .status.lastVersion }}' > version.txt"
        build = readFile('version.txt').trim()
        echo "Last build number ${build}"
        def newTag = "TestReady-${parksmapversion}-${build}"
        echo "New Tag: ${newTag}"


        //Tag the Openshift image 
        openshiftTag alias: 'false', destStream: 'parksmap-web', destTag: newTag, destinationNamespace: 'development', namespace: 'development', srcStream: 'parksmap-web', srcTag: 'latest', verbose: 'false'
    }

    //
    //Deploy the previously built image patching parksmap-web deployment configuration 
    //The verify deployment and Service 
    stage('Deploy to Development') {
    // Patch the DeploymentConfig so that it points to the latest TestingCandidate-${version} Image.
    def build

    sh "oc project development"
    sh "oc get bc/parksmap-web --template='{{ .status.lastVersion }}' > version.txt"
    build = readFile('version.txt').trim()
    echo "Last build number ${build}"
    def newTag = "TestReady-${parksmapversion}-${build}"
    echo "New Tag: ${newTag}"
    sh "oc patch dc parksmap-web --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"parksmap-web\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"development\", \"name\": \"parksmap-web:$newTag\"}}}]}}' -n development"

    openshiftDeploy depCfg: 'parksmap-web', namespace: 'development', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: 'parksmap-web', namespace: 'development', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: 'development', svcName: 'parksmap-web', verbose: 'false'
    }



    //Build the image in integration test 
    //Deploy the TestReady tagged image , test it and and if ok tag the image as ProdReady
  stage('Parksmap Integration Test') {
    // Integration test-------------
    //if ok allora tag Prod Ready
    
    
    
    
    sh "oc project test-env"
    sh "cd ${parksmap};oc start-build parksmap-web --follow --from-file=./ROOT.jar -n test-env"
    
    

    
    //Get last build Version 
    sh "oc get bc/parksmap-web --template='{{ .status.lastVersion }}' > version.txt"
    
    def build = readFile('version.txt').trim()
    echo "Last build number ${build}"
    def newTag = "TestReady-${parksmapversion}-${build}"
    echo "New Tag: ${newTag}"
    sh "oc patch dc parksmap-web --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"parksmap-web\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"test-env\", \"name\": \"parksmap-web:$newTag\"}}}]}}' -n test-env"


    openshiftTag alias: 'false', destStream: 'parksmap-web', destTag: newTag, destinationNamespace: 'test-env', namespace: 'test-env', srcStream: 'parksmap-web', srcTag: 'latest', verbose: 'false'

    
    
    openshiftDeploy depCfg: 'parksmap-web', namespace: 'test-env', verbose: 'false', waitTime: '', waitUnit: 'sec'
    
    //Integration Test 
    echo "CAlling parksmap-web route url "
    sh "curl -kv \$(oc get route parksmap-web -n test-env --template '{{ .spec.host }}')"
    
    
    openshiftVerifyDeployment depCfg: 'parksmap-web', namespace: 'test-env', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: 'test-env', svcName: 'parksmap-web', verbose: 'false'


    newTag = "ProdReady-${parksmapversion}-${build}"
    
    echo "New Tag: ${newTag}"
    openshiftTag alias: 'false', destStream: 'parksmap-web', destTag: newTag, destinationNamespace: 'test-env', namespace: 'test-env', srcStream: 'parksmap-web', srcTag: 'latest', verbose: 'false'


  }


def dest   = "parksmap-green"
def active = ""


//Deploy in Pre-Production with Blue/Green Stategies
stage('Deploy to Pre-Production with Blue/Green ') {
    
    //Get the exposed service in order to switch to the other one 
    sh "oc project prod-env"
    sh "oc get route parksmap-web -n prod-env -o jsonpath='{ .spec.to.name }' > activesvc.txt"
    active = readFile('activesvc.txt').trim()
    if (active == "parksmap-green") {
      dest = "parksmap-blue"
    }
    echo "Active svc: " + active
    echo "Dest svc:   " + dest

}

//Deploy the new image patching the nationalparks deployment config in prod-env
//with the lastest ProdReady image 
stage('Deploy new Version') {
    echo "Deploying to ${dest}"

    // Patch the DeploymentConfig so that it points to
    // the latest ProdReady-${version}-${build} Image.
    
    sh "oc get bc/parksmap-web -n test-env --template='{{ .status.lastVersion }}' > version.txt"
    build = readFile('version.txt').trim()
    echo "Last build number ${build}"
    def newTag = "ProdReady-${parksmapversion}-${build}"
    echo "New Tag: ${newTag}"


    sh "oc patch dc ${dest} --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"$dest\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"test-env\", \"name\": \"parksmap-web:$newTag\"}}}]}}' -n prod-env"

    openshiftDeploy depCfg: dest, namespace: 'prod-env', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: dest, namespace: 'prod-env', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: 'prod-env', svcName: dest, verbose: 'false'
  }


//Switch to the newer version of parksmap-web image 
//Patch the route parksmap
stage('Switch over to new Version') {
    input "Switch Production?"

    //P
    sh 'oc patch route parksmap-web -n prod-env -p \'{"spec":{"to":{"name":"' + dest + '"}}}\''
    sh 'oc get route parksmap-web -n prod-env > oc_out.txt'
    oc_out = readFile('oc_out.txt')
    echo "Current route configuration: " + oc_out
  }

}



 

// Convenience Functions to read variables from the pom.xml
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
 